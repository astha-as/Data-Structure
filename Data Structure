#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Ticket {
    int ticketNumber;
    char passengerName[50];
    int seatNumber;
    struct Ticket *next;
};

struct Flight {
    int flightNumber;
    char source[50];
    char destination[50];
    char departureTime[10];
    char arrivalTime[10];
    int totalSeats;
    int availableSeats;
    struct Ticket *tickets;
    struct Flight *next;
};

struct Flight *createFlight(int flightNumber, char source[50], char destination[50], char departureTime[10], char arrivalTime[10], int totalSeats) {
    struct Flight *flight = (struct Flight *)malloc(sizeof(struct Flight));
    flight->flightNumber = flightNumber;
    strcpy(flight->source, source);
    strcpy(flight->destination, destination);
    strcpy(flight->departureTime, departureTime);
    strcpy(flight->arrivalTime, arrivalTime);
    flight->totalSeats = totalSeats;
    flight->availableSeats = totalSeats;
    flight->tickets = NULL;
    flight->next = NULL;
    return flight;
}

void bookTicket(struct Flight *flight, int ticketNumber, char passengerName[50]) {
    if (flight->availableSeats > 0) {
        struct Ticket *ticket = (struct Ticket *)malloc(sizeof(struct Ticket));
        ticket->ticketNumber = ticketNumber;
        strcpy(ticket->passengerName, passengerName);
        ticket->seatNumber = flight->totalSeats - flight->availableSeats + 1;
        flight->availableSeats--;
        ticket->next = flight->tickets;
        flight->tickets = ticket;
        printf("Ticket booked successfully for %s on flight %d from %s to %s. Seat Number: %d\n", passengerName, flight->flightNumber, flight->source, flight->destination, ticket->seatNumber);
    } else {
        printf("Sorry, no available seats on flight %d from %s to %s\n", flight->flightNumber, flight->source, flight->destination);
    }
}

int validateTime(char time[10]) {
    int hour, minute;
    if (sscanf(time, "%d:%d", &hour, &minute) == 2) {
        if (hour >= 0 && hour <= 23 && minute >= 0 && minute <= 59) {
            return 1; // Valid time
        }
    }
    return 0; // Invalid time
}

void displayFlights(struct Flight *head) {
    struct Flight *current = head;
    while (current != NULL) {
        printf("Flight %d from %s to %s\n", current->flightNumber, current->source, current->destination);
        printf("Departure Time: %s\n", current->departureTime);
        printf("Arrival Time: %s\n", current->arrivalTime);
        printf("Available Seats: %d\n", current->availableSeats);
        printf("Tickets Booked:\n");
        struct Ticket *ticket = current->tickets;
        while (ticket != NULL) {
            printf("Ticket Number: %d, Passenger Name: %s, Seat Number: %d\n", ticket->ticketNumber, ticket->passengerName, ticket->seatNumber);
            ticket = ticket->next;
        }
        current = current->next;
    }
}

int main() {
    struct Flight *head = NULL;
    int choice;

    while (1) {
        printf("\nFlight Management System\n");
        printf("1. Add Flight\n");
        printf("2. Book Ticket\n");
        printf("3. Display Flights\n");
        printf("4. Show Available Seats\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: {
                int flightNumber, totalSeats;
                char source[50], destination[50], departureTime[10], arrivalTime[10];
                printf("Enter Flight Number: ");
                scanf("%d", &flightNumber);
                printf("Enter Source: ");
                scanf("%s", source);
                printf("Enter Destination: ");
                scanf("%s", destination);
                printf("Enter Departure Time (HH:MM): ");
                scanf("%s", departureTime);
                printf("Enter Arrival Time (HH:MM): ");
                scanf("%s", arrivalTime);
                if (!validateTime(departureTime) || !validateTime(arrivalTime)) {
                    printf("Invalid time format. Please use HH:MM format for departure and arrival times.\n");
                    continue;
                }
                printf("Enter Total Seats: ");
                scanf("%d", &totalSeats);
                struct Flight *newFlight = createFlight(flightNumber, source, destination, departureTime, arrivalTime, totalSeats);
                newFlight->next = head;
                head = newFlight;
                printf("Flight added successfully.\n");
            } break;
            case 2: {
                int flightNumber, ticketNumber;
                char passengerName[50];
                printf("Enter Flight Number: ");
                scanf("%d", &flightNumber);
                struct Flight *current = head;
                while (current != NULL) {
                    if (current->flightNumber == flightNumber) {
                        printf("Enter Ticket Number: ");
                        scanf("%d", &ticketNumber);
                        printf("Enter Passenger Name: ");
                        scanf("%s", passengerName);
                        bookTicket(current, ticketNumber, passengerName);
                        break;
                    }
                    current = current->next;
                }
            } break;
            case 3:
                displayFlights(head);
                break;
            case 4:
                {
                    int totalAvailableSeats = 0;
                    struct Flight *current = head;
                    while (current != NULL) {
                        totalAvailableSeats += current->availableSeats;
                        current = current->next;
                    }
                    printf("Total Available Seats: %d\n", totalAvailableSeats);
                }
                break;
            case 5:
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
